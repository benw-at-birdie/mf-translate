cubes:
  - name: orders
    sql_table: jaffle_shop.orders

    joins:
      - name: customers
        sql: "{orders}.customer_id = {customers}.customer_id"
        relationship: many_to_one

      - name: locations
        sql: "{orders}.location_id = {locations}.location_id"
        relationship: many_to_one

    dimensions:

      - name: order_id
        type: string
        primary_key: true
        sql: order_id

      - name: ordered_at
        type: time
        # Cube requires a timestamp whereas DBT wants a datetime:
          # - https://cube.dev/docs/guides/recipes/data-modeling/string-time-dimensions
          # - https://github.com/dbt-labs/metricflow/issues/733
        sql: TIMESTAMP(ordered_at, 'UTC') 

      - name: discount_code
        type: string
        sql: discount_code

      - name: is_drink_order
        type: string
        sql: is_drink_order

      - name: is_food_order
        type: string
        sql: is_food_order

      - name: is_large_order
        type: string
        sql: order_total > 20

    measures:
      - name: order_total
        description: Sum of total order amonunt. Includes tax + revenue.
        type: sum
        sql: order_total

      - name: food_orders
        description: Count of orders that contain food order items.
        type: sum
        sql: (1)
        filters:
          - sql: "{is_food_order} = True"

      - name: large_orders
        description: Count of orders with order total over 20.
        type: sum
        sql: (1)
        filters:
          - sql: "{is_large_order} = True"

      - name: orders_last_7_days
        description: Count of orders.
        type: sum
        sql: (1)
        rolling_window:
            trailing: 7 day

      # PC_DRINK_ORDERS_FOR_RETURNING_CUSTOMERS
      - name: pc_drink_orders_for_returning_customers_numerator
        public: false
        type: sum
        sql: (1)
        filters:
          - sql: "{is_drink_order} = True"
          - sql: "{customers.customer_type} = 'returning'"
      - name: pc_drink_orders_for_returning_customers_denominator
        public: false
        type: sum
        sql: (1)
        filters:
          - sql: "{customers.customer_type} = 'returning'"
      - name: pc_drink_orders_for_returning_customers
        description: Percentage of drink orders from returning customers.
        type: number
        sql: "{pc_drink_orders_for_returning_customers_numerator} / NULLIF({pc_drink_orders_for_returning_customers_denominator}, 0)"